vector<vector<int>>& edges
int m = edges.size();

vector<int> e[n], v[n];
for (auto &edge : edges) {
    e[edge[0]].push_back(edge[1]); v[edge[0]].push_back(edge[2]);
    e[edge[1]].push_back(edge[0]); v[edge[1]].push_back(edge[2]);
}

// 求从 S 出发的最短路，答案保存在 dis 里
auto dijkstra = [&](int S, long long *dis) {
    memset(dis, -1, sizeof(long long) * n);
    typedef pair<long long, int> pii;
    priority_queue<pii, vector<pii>, greater<pii>> pq;
    pq.push({0, S});
    while (!pq.empty()) {
        pii p = pq.top(); pq.pop();
        int sn = p.second;
        if (dis[sn] >= 0) continue;
        dis[sn] = p.first;
        for (int i = 0; i < e[sn].size(); i++) {
            int fn = e[sn][i];
            if (dis[fn] >= 0) continue;
            pq.push({dis[sn] + v[sn][i], fn});
        }
    }
};

// dis1：从 0 出发的最短路
// dis2：从 n - 1 出发的最短路
long long dis1[n], dis2[n];
dijkstra(0, dis1); dijkstra(n - 1, dis2);